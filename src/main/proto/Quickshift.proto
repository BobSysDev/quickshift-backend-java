syntax = "proto3";

option csharp_namespace = "GrpcClient";
option java_multiple_files = true;
option java_package = "quickshift.grpc.service";

package org.grpc.service;

service Shift{
  rpc AddSingleShift (NewShiftDTO) returns (ShiftDTO);
  rpc GetSingleShiftById (Id) returns (ShiftDTO); //Throws NOT_FOUND if shift with this ID was not found
  rpc GetAllShifts(Empty) returns (ShiftDTOList);
  rpc GetManyShiftsAfterStartDate (DateTimeInMillis) returns (ShiftDTOList);
  rpc GetManyShiftsByEmployee (Id) returns (ShiftDTOList); //Throws NOT_FOUND if employee with this ID not found
  rpc UpdateSingleShift (ShiftDTO) returns (ShiftDTO); //Throws NOT_FOUND if shift with this ID not found
  rpc DeleteSingleShift (Id) returns (GenericTextMessage); //Throws NOT_FOUND if shift with was this ID not found
  rpc IsShiftInRepository (Id) returns (Boolean);
  rpc AssignEmployeeToShift (ShiftEmployeePair) returns (GenericTextMessage); // Throws NOT_FOUND if employee or shift with the given IDs were not found
  rpc UnAssignEmployeeFromShift (Id) returns (GenericTextMessage); // Throws NOT_FOUND if shift with this ID was not found
}

service Employee{
  rpc AddSingleEmployee (NewEmployeeDTO) returns (EmployeeDTO); //Throws ALREADY_EXISTS if it detects a duplicate working number
  rpc GetSingleEmployeeById (Id) returns (EmployeeDTO); //Throws NOT_FOUND if employee with this ID was not found
  rpc GetAllEmployees (Empty) returns (EmployeeDTOList);
  rpc GetManyEmployeesByName (GenericTextMessage) returns (EmployeeDTOList);
  rpc UpdateSingleEmployee (UpdateEmployeeDTO) returns (EmployeeDTO); //Throws NOT_FOUND if employee with this it was not found, or ALREADY_EXISTS if the new working number collides with another employee
  rpc DeleteSingleEmployee (Id) returns (GenericTextMessage); //Throws NOT_FOUND if employee with this ID was not found
  rpc IsEmployeeInRepository (Id) returns (Boolean);
  rpc GetSingleEmployeeByWorkingNumber (WorkingNumber) returns (EmployeeDTO); //Throws NOT_FOUND if employee with this Employee Number was not found
}

message Id {
  sint64 Id = 1;
}

message GenericTextMessage {
  string Text = 1;
}

message Empty{

}

message Boolean{
  bool result = 1;
}

message DateTimeInMillis{
  sint64 DateTime = 1;
}

message WorkingNumber{
  uint32 WorkingNumber = 1;
}

message ShiftDTO {
  sint64 Id = 1;
  sint64 StartDateTime = 2;
  sint64 EndDateTime = 3;
  string TypeOfShift = 4;
  string ShiftStatus = 5;
  string Description = 6;
  string Location = 7;
}

message NewShiftDTO {
  sint64 StartDateTime = 1;
  sint64 EndDateTime = 2;
  string TypeOfShift = 3;
  string ShiftStatus = 4;
  string Description = 5;
  string Location = 6;
}

message ShiftEmployeePair {
  sint64 ShiftId = 1;
  sint64 EmployeeId = 2;
}

message ShiftDTOList {
  repeated ShiftDTO dtos = 1;
}

message EmployeeDTO {
  sint64 Id = 1;
  string FirstName = 2;
  string LastName = 3;
  uint32 WorkingNumber = 4;
  string Email = 5;
  string Password = 6;
  ShiftDTOList AssignedShifts = 7;
}

message NewEmployeeDTO {
  string FirstName = 1;
  string LastName = 2;
  uint32 WorkingNumber = 3;
  string Email = 4;
  string Password = 5;
}

message UpdateEmployeeDTO {
  sint64 Id = 1;
  string FirstName = 2;
  string LastName = 3;
  uint32 WorkingNumber = 4;
  string Email = 5;
  string Password = 6;
}

message EmployeeDTOList {
  repeated EmployeeDTO dtos = 1;
}
